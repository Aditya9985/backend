import dotenv from "dotenv";
import express from "express";
import pkg      // Query the aiOutput table with the correct column names
      const result = await pool.query(
        'SELECT * FROM "aiOutput" WHERE "createdBy" = $1 ORDER BY "createdAt" DESC',
        [email]
      ); "pg";
import cors from "cors";
import { drizzle } from "drizzle-orm/node-postgres";

dotenv.config();
const { Pool } = pkg;

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});

const db = drizzle(pool);

const app = express();
const PORT = process.env.PORT || 4000;

// Middleware
app.use(cors());
app.use(express.json());

// Health check endpoint
app.get("/api/ping", async (req, res) => {
  try {
    const result = await pool.query("SELECT NOW() as now");
    res.json({ ok: true, now: result.rows[0].now });
  } catch (err) {
    res.status(500).json({ ok: false, error: err.message });
  }
});

// History endpoint
app.get("/api/history", async (req, res) => {
  try {
    const { email } = req.query;
    console.log('Received request for email:', email);

    if (!email || typeof email !== 'string') {
      console.log('Email is missing or invalid');
      return res.status(400).json({ error: 'Email is required' });
    }

    console.log('Executing query for aiOutput table...');
    try {
      const result = await pool.query(
        'SELECT * FROM "aiOutput" WHERE "createdBy" = $1 ORDER BY "createdAt" DESC',
        [email]
      );
      console.log('Query result:', result.rows);
      return res.json(result.rows);
      return res.status(500).json({ error: 'Database connection failed' });
    }

    console.log('Executing query with email:', email);
    try {
      // First, let's check if the table exists
      const tableCheck = await pool.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = 'aiOutput'
        );
      `);
      
      if (!tableCheck.rows[0].exists) {
        console.error('Table aiOutput does not exist');
        return res.status(500).json({ error: 'Table not found' });
      }

      // Query using raw SQL since we don't have the schema defined yet
      const result = await pool.query(
        'SELECT * FROM "aiOutput" WHERE "createdBy" = $1 ORDER BY "createdAt" DESC',
        [email]
      );
      console.log('Query result:', result.rows);
      return res.json(result.rows);
    } catch (err) {
      console.error('Database error:', err);
      return res.status(500).json({ error: 'Database query failed: ' + err.message });
    }
    
    console.log('Found history entries:', result.rows.length);
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching history:', error);
    res.status(500).json({ error: 'Failed to fetch history' });
  }
});

app.listen(PORT, () => {
  console.log(`API server running on http://localhost:${PORT}`);
});
